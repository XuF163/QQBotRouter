# 工作流名称
name: Go Cross-Platform Build and Release

# 触发工作流的事件
on:
  # 1. 当代码推送到 master 分支时 (仅构建和测试)
  push:
    branches: [ "master" ]
  # 2. 当有 Pull Request 指向 master 分支时 (仅构建和测试)
  pull_request:
    branches: [ "master" ]
  # 3. 当创建新的标签 (格式为 v*.*.*) 时，触发发布
  push:
    tags:
      - 'v*.*.*'

# 环境变量
env:
  GO_MAIN_PATH: '.'
  BINARY_NAME: '429RouterBeat'

jobs:
  # ==================================
  # 构建 Job: 负责编译所有平台的文件
  # ==================================
  build:
    name: Build for ${{ matrix.goos }}-${{ matrix.goarch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: darwin # macOS
            goarch: amd64
          - goos: darwin # macOS Apple Silicon
            goarch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      # 修正步骤 1: 准备文件名并存入环境变量
      - name: Prepare file names
        id: prep
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            BASE_NAME="${{ env.BINARY_NAME }}"
          else
            BASE_NAME="${{ env.BINARY_NAME }}-$(date +'%Y-%m-%d')"
          fi
          
          OUTPUT_NAME="${BASE_NAME}-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ ${{ matrix.goos }} == 'windows' ]; then
            OUTPUT_NAME+='.exe'
          fi
          
          # 将准备好的文件名写入 GitHub 环境变量，供后续步骤使用
          echo "OUTPUT_NAME=${OUTPUT_NAME}" >> $GITHUB_ENV

      # 修正步骤 2: 使用准备好的环境变量进行编译
      - name: Build
        run: |
          echo "Building binary as ${{ env.OUTPUT_NAME }}"
          env GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -v -ldflags="-s -w" -o "${{ env.OUTPUT_NAME }}" ${{ env.GO_MAIN_PATH }}

      # 修正步骤 3: 使用准备好的环境变量上传产物
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          # 使用一个固定的名字 "binaries"，方便 release job 下载
          name: binaries
          # 使用准备好的 OUTPUT_NAME 作为路径
          path: ${{ env.OUTPUT_NAME }}

  # ==================================
  # 发布 Job: 仅在打标签时运行
  # ==================================
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Download all binaries
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: ./binaries

      - name: Create Release and Upload Assets
        uses: ncipollo/release-action@v1
        with:
          artifacts: "./binaries/*"
          generateReleaseNotes: true
          token: ${{ secrets.GITHUB_TOKEN }}
